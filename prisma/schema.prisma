// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MOD
  USER
}

model User {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  firstName        String
  lastName         String
  email            String   @unique
  username         String   @unique
  password         String
  avatar           String?
  emailVerified    Boolean  @default(false)
  verificationCode String

  role         Role
  customer     Customer?
  subscription Subscription?
  card         Card?
  team         Team?         @relation(fields: [teamId], references: [id])
  teamId       Int?
  branches     Branch[]
  projects     Project[]
  sprints      Sprint[]
  tasks        Task[]
  files        File[]
  events       Event[]
}

enum PaymentStatus {
  SUCCESS
  FAILED
}

model Customer {
  id            Int           @id @default(autoincrement())
  customerId    String
  paymentMethod String?
  paymentStatus PaymentStatus
  invoices      Invoice[]
  user          User          @relation(fields: [userId], references: [id])
  userId        Int           @unique
}

enum Type {
  PERSONAL
  TEAMS
}

enum Tier {
  FREE
  PRO
}

model Subscription {
  id                Int     @id @default(autoincrement())
  subscriptionId    String?
  subscriptionItem  String?
  type              Type
  tier              Tier
  quantity          Int     @default(1)
  cancelAtPeriodEnd Boolean @default(false)
  currentInvoice    String?
  nextInvoice       String?
  user              User    @relation(fields: [userId], references: [id])
  userId            Int     @unique
}

model Invoice {
  id         Int       @id @default(autoincrement())
  date       String
  amount     String
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?
}

model Card {
  id     Int    @id @default(autoincrement())
  brand  String
  last4  String
  month  Int
  year   Int
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Team {
  id       Int      @id @default(autoincrement())
  name     String
  users    User[]
  branches Branch[]
  chat     Chat[]
}

model Branch {
  id       Int       @id @default(autoincrement())
  name     String
  users    User[]
  Team     Team      @relation(fields: [teamId], references: [id])
  teamId   Int
  projects Project[]
}

model Project {
  id       Int      @id @default(autoincrement())
  name     String
  users    User[]
  branch   Branch?  @relation(fields: [branchId], references: [id])
  branchId Int?
  sprints  Sprint[]
  chat     Chat[]
}

enum Importance {
  HIGH
  MEDIUM
  LOW
}

enum Status {
  PROGRESS
  INCOMPLETE
  COMPLETE
  DISCARD
}

model Sprint {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  name       String
  objectives String[]
  dueDate    DateTime?
  importance Importance
  status     Status
  users      User[]
  chat       Chat[]
  Project    Project?   @relation(fields: [projectId], references: [id])
  projectId  Int?
}

model Task {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  user      User[]
  due       DateTime
  status    Status
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String
  name      String
  message   String
  link      String?
  download  String?
  Sprint    Sprint?  @relation(fields: [sprintId], references: [id])
  sprintId  Int?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
  Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    Int?
}

model File {
  id     Int    @id @default(autoincrement())
  name   String
  size   String
  User   User?  @relation(fields: [userId], references: [id])
  userId Int?
}

// model Message {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   from      String
//   to        String
//   message   String
//   User      User?    @relation(fields: [userId], references: [id])
//   userId    Int?
// }

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime
  users     User[]
  name      String
  duration  Int
  past      Boolean  @default(false)
}
